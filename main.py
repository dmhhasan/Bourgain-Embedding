import argparse
from utils import *
import math 
import numpy as np

parser = argparse.ArgumentParser("Bourgain embedding")
parser.add_argument('--graph', type = str, default='uihc', help = 'Choose the graph for generating the embedding')
# Remote sql data
parser.add_argument('--host', type=str, default='localhost')
parser.add_argument('--username', type = str, default='')
parser.add_argument('--password', type = str, default='')
parser.add_argument('--database', type=str, default='')
args = parser.parse_args()


if __name__=="__main__":
    adj, node_mapping, index_mapping = load_graph(args)
    print(adj.toarray())
    dist_mat = get_shortest_path_distances(args, adj)
    print(dist_mat)

    # Apply Bourgain's embedding algorithm
    c = 2
    n = adj.shape[0]
    j_max = math.floor(np.log(n))
    i_max = c*j_max

    #Steps:
    #(1) For every j, 1 <= j <= floor(log n), generate a random subset A_j of the set of nodes. A_j is generated by picking each node in the graph independently with probability 1/2^j. For example, nodes in A_1 will be picked with prob 1/2.
    #(2) Now for every i, 1 <= i <= c*floor(log n), and every node u,
    #                              f_{ij}(u) = maximum distance_{v in A_j} between u and v
    #Some notes:
    #-Note that f_{1j}(u) = f_{2j}(u) = f_{3j}(u)...
    #-distance between u and v refers to the shortest path distance in the underlying graph


    # Generate subsets of nodes (A_j) by independenty picking each node with probability 1/2^j
    A = {}
    for j in range(1,j_max+1):
        prob = 1/(2**j)
        u = np.random.rand(n)
        indices = np.where(u<prob)[0]
        A[j] = indices
    
    # Initialize the embedding matrix with zeros
    emb = np.zeros(shape=(n, i_max*j_max))

    # Update embedding for each of the node
    for node in range(n):
        list = []
        for j in range(1, j_max+1):
            max_dist = np.max(dist_mat[node,A[j]])
            for i in range(1, i_max+1):
                list.append(max_dist)
        emb[node] = list
    Path("output/").mkdir(parents=True, exist_ok=True)
    np.savez("output/"+args.graph+"_embedding.npz", embedding = emb, node_mapping = node_mapping, index_mapping = index_mapping)
    
    print(emb)
    print(emb.shape)





